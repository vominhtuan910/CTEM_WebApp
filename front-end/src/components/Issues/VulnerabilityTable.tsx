import { useState, useEffect } from 'react';
import { DatePicker } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import SearchIcon from '@mui/icons-material/Search';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import VisibilityIcon from '@mui/icons-material/Visibility';
import GetAppIcon from '@mui/icons-material/GetApp';
import SecurityIcon from '@mui/icons-material/Security';
import RefreshIcon from '@mui/icons-material/Refresh';
import VulnerabilityDetail from './VulnerabilityDetail.tsx';
import {
    Table, 
    TableBody, 
    TableCell, 
    TableContainer, 
    TableHead,
    TableRow,
    Paper,
    TextField,
    MenuItem,
    Select,
    FormControl,
    InputLabel,
    Chip,
    Button,
    IconButton,
    Typography,
    Card,
    CardContent,
    Box,
    Divider,
    Tooltip
} from '@mui/material';

// Interface definitions remain the same
interface Vulnerability {
    id: string;
    name: string;
    type: string;
    cvssScore: number;
    severity: 'Critical' | 'High' | 'Medium' | 'Low';
    affectedAssets: string[];
    discoveryDate: Date;
    isFixed: boolean;
    description: string;
    recommendations: string;
    cveReferences: string[];
}

interface VulnerabilityTableProps {
    vulnerabilities: Vulnerability[];
    onUpdateStatus: (id: string, isFixed: boolean) => void;
    isLoading: boolean;
    onRefresh?: () => void; // Optional refresh callback
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ 
    vulnerabilities, 
    onUpdateStatus,
    isLoading,
    onRefresh 
}) => {
    // State definitions remain the same
    const [sortConfig, setSortConfig] = useState<{
        key: keyof Vulnerability | null;
        direction: 'ascending' | 'descending';
    }>({
        key: 'severity',
        direction: 'descending',
    });

    const [filters, setFilters] = useState({
        search: '',
        severity: 'all',
        startDate: null as Date | null,
        endDate: null as Date | null,
    });

    const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
    const [detailOpen, setDetailOpen] = useState(false);
    const [displayedVulnerabilities, setDisplayedVulnerabilities] = useState<Vulnerability[]>([]);

    // Stats for summary cards
    const criticalCount = vulnerabilities.filter(v => v.severity === 'Critical').length;
    const highCount = vulnerabilities.filter(v => v.severity === 'High').length;
    const fixedCount = vulnerabilities.filter(v => v.isFixed).length;

    // Function implementations remain the same
    const requestSort = (key: keyof Vulnerability) => {
        let direction: 'ascending' | 'descending' = 'ascending';
        if (sortConfig.key === key && sortConfig.direction === 'ascending') {
            direction = 'descending';
        }
        setSortConfig({ key, direction });
    };

    const handleFilterChange = (field: string, value: any) => {
        setFilters(prev => ({ ...prev, [field]: value }));
    };

    const exportToCSV = () => {
        const headers = ['Name', 'Type', 'CVSS Score', 'Severity', 'Affected Assets', 'Discovery Date', 'Status'];
        const csvData = displayedVulnerabilities.map(vuln => [
            vuln.name,
            vuln.type,
            vuln.cvssScore,
            vuln.severity,
            vuln.affectedAssets.join(', '),
            vuln.discoveryDate.toLocaleDateString(),
            vuln.isFixed ? 'Fixed' : 'Not Fixed'
        ]);
        
        const csvContent = [
            headers.join(','),
            ...csvData.map(row => row.join(','))
        ].join('\n');
        
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `vulnerabilities_${new Date().toISOString()}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const handleViewDetail = (vulnerability: Vulnerability) => {
        setSelectedVulnerability(vulnerability);
        setDetailOpen(true);
    };

    // Apply filters and sorting
    useEffect(() => {
        let result = [...vulnerabilities];
        
        // Apply filters
        if (filters.search) {
            const searchLower = filters.search.toLowerCase();
            result = result.filter(
                item => item.name.toLowerCase().includes(searchLower) ||
                                         item.affectedAssets.some(asset => asset.toLowerCase().includes(searchLower))
            );
        }
        
        if (filters.severity !== 'all') {
            result = result.filter(item => item.severity === filters.severity);
        }
        
        if (filters.startDate) {
            result = result.filter(item => item.discoveryDate >= filters.startDate!);
        }
        
        if (filters.endDate) {
            result = result.filter(item => item.discoveryDate <= filters.endDate!);
        }
        
        // Apply sorting
        if (sortConfig.key) {
            result.sort((a, b) => {
                if (a[sortConfig.key!] < b[sortConfig.key!]) {
                    return sortConfig.direction === 'ascending' ? -1 : 1;
                }
                if (a[sortConfig.key!] > b[sortConfig.key!]) {
                    return sortConfig.direction === 'ascending' ? 1 : -1;
                }
                return 0;
            });
        }
        
        setDisplayedVulnerabilities(result);
    }, [vulnerabilities, filters, sortConfig]);

    // Render severity badge with appropriate color
    const renderSeverityBadge = (severity: string) => {
        let bgColor = '';
        switch (severity) {
            case 'Critical':
                bgColor = 'bg-red-600';
                break;
            case 'High':
                bgColor = 'bg-orange-500';
                break;
            case 'Medium':
                bgColor = 'bg-yellow-500';
                break;
            case 'Low':
                bgColor = 'bg-blue-500';
                break;
            default:
                bgColor = 'bg-gray-500';
        }
        
        return (
            <Chip 
                label={severity}
                className={`${bgColor} text-white font-medium`}
                size="small"
            />
        );
    };

    return (
        <div className="vulnerability-dashboard p-4">
            {/* Header Section */}
            <Box className="mb-6 flex flex-col gap-2">
                <Box className="flex justify-between items-center">
                    <Box className="flex items-center">
                        <SecurityIcon sx={{ fontSize: 32, color: 'primary.main', mr: 2 }} />
                        <Typography variant="h4" component="h1" className="font-bold">
                            Vulnerability Management
                        </Typography>
                    </Box>
                    
                    <Tooltip title="Refresh data">
                        <Button
                            variant="outlined"
                            startIcon={<RefreshIcon />}
                            onClick={onRefresh}
                            disabled={isLoading}
                            className="ml-auto"
                        >
                            Refresh
                        </Button>
                    </Tooltip>
                </Box>
                
                <Typography variant="body1" color="text.secondary" className="mb-2">
                    Monitor, analyze and manage system vulnerabilities in one place
                </Typography>
                
                <Divider className="my-3" />
            </Box>
            
            {/* Summary Cards */}
            <Box className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <Card className="bg-red-50 border border-red-200">
                    <CardContent>
                        <Typography variant="subtitle2" color="text.secondary">Critical Vulnerabilities</Typography>
                        <Typography variant="h4">{criticalCount}</Typography>
                    </CardContent>
                </Card>
                
                <Card className="bg-orange-50 border border-orange-200">
                    <CardContent>
                        <Typography variant="subtitle2" color="text.secondary">High Severity Issues</Typography>
                        <Typography variant="h4">{highCount}</Typography>
                    </CardContent>
                </Card>
                
                <Card className="bg-green-50 border border-green-200">
                    <CardContent>
                        <Typography variant="subtitle2" color="text.secondary">Fixed Vulnerabilities</Typography>
                        <Typography variant="h4">{fixedCount}</Typography>
                    </CardContent>
                </Card>
            </Box>

            {/* Filters Section */}
            <Paper className="p-4 mb-6" elevation={1}>
                <Typography variant="h6" className="mb-3">Filters</Typography>
                <div className="flex flex-wrap items-center gap-4">
                    <TextField
                        label="Search"
                        variant="outlined"
                        size="small"
                        value={filters.search}
                        onChange={(e) => handleFilterChange('search', e.target.value)}
                        className="min-w-[200px]"
                        slotProps={{
                            input: {
                                startAdornment: <SearchIcon className="mr-2 text-gray-400" />,
                            }
                        }}
                    />
                    
                    <FormControl variant="outlined" size="small" className="min-w-[150px]">
                        <InputLabel>Severity</InputLabel>
                        <Select
                            value={filters.severity}
                            onChange={(e) => handleFilterChange('severity', e.target.value)}
                            label="Severity"
                        >
                            <MenuItem value="all">All</MenuItem>
                            <MenuItem value="Critical">Critical</MenuItem>
                            <MenuItem value="High">High</MenuItem>
                            <MenuItem value="Medium">Medium</MenuItem>
                            <MenuItem value="Low">Low</MenuItem>
                        </Select>
                    </FormControl>

                    <LocalizationProvider dateAdapter={AdapterDateFns}>
                        <DatePicker
                            label="From"
                            value={filters.startDate}
                            onChange={(date) => handleFilterChange('startDate', date)}
                            slotProps={{ textField: { size: 'small' } }}
                        />
                        <DatePicker
                            label="To"
                            value={filters.endDate}
                            onChange={(date) => handleFilterChange('endDate', date)}
                            slotProps={{ textField: { size: 'small' } }}
                        />
                    </LocalizationProvider>
                    
                    <Button
                        variant="contained"
                        startIcon={<GetAppIcon />}
                        onClick={exportToCSV}
                        disabled={displayedVulnerabilities.length === 0}
                        className="ml-auto"
                    >
                        Export CSV
                    </Button>
                </div>
            </Paper>
            
            {/* Table Section */}
            <Typography variant="h6" className="mb-2">
                Vulnerability List <span className="text-sm font-normal text-gray-500">({displayedVulnerabilities.length} items)</span>
            </Typography>
            
            <TableContainer component={Paper} className="mb-8">
                <Table>
                    <TableHead className="bg-gray-100">
                        <TableRow>
                            <TableCell>
                                Name
                                <IconButton size="small" onClick={() => requestSort('name')}>
                                    {sortConfig.key === 'name' ? (
                                        sortConfig.direction === 'ascending' ? <ArrowUpwardIcon fontSize="small" /> : <ArrowDownwardIcon fontSize="small" />
                                    ) : null}
                                </IconButton>
                            </TableCell>
                            <TableCell>Type</TableCell>
                            <TableCell>
                                CVSS Score
                                <IconButton size="small" onClick={() => requestSort('cvssScore')}>
                                    {sortConfig.key === 'cvssScore' ? (
                                        sortConfig.direction === 'ascending' ? <ArrowUpwardIcon fontSize="small" /> : <ArrowDownwardIcon fontSize="small" />
                                    ) : null}
                                </IconButton>
                            </TableCell>
                            <TableCell>
                                Severity
                                <IconButton size="small" onClick={() => requestSort('severity')}>
                                    {sortConfig.key === 'severity' ? (
                                        sortConfig.direction === 'ascending' ? <ArrowUpwardIcon fontSize="small" /> : <ArrowDownwardIcon fontSize="small" />
                                    ) : null}
                                </IconButton>
                            </TableCell>
                            <TableCell>Affected Assets</TableCell>
                            <TableCell>
                                Discovery Date
                                <IconButton size="small" onClick={() => requestSort('discoveryDate')}>
                                    {sortConfig.key === 'discoveryDate' ? (
                                        sortConfig.direction === 'ascending' ? <ArrowUpwardIcon fontSize="small" /> : <ArrowDownwardIcon fontSize="small" />
                                    ) : null}
                                </IconButton>
                            </TableCell>
                            <TableCell>Status</TableCell>
                            <TableCell>Actions</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {isLoading ? (
                            <TableRow>
                                <TableCell colSpan={8} align="center" className="py-8">
                                    <div className="flex justify-center items-center">
                                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mr-3"></div>
                                        Loading vulnerabilities...
                                    </div>
                                </TableCell>
                            </TableRow>
                        ) : displayedVulnerabilities.length === 0 ? (
                            <TableRow>
                                <TableCell colSpan={8} align="center" className="py-8">
                                    No vulnerabilities found.
                                </TableCell>
                            </TableRow>
                        ) : (
                            displayedVulnerabilities.map((vulnerability) => (
                                <TableRow key={vulnerability.id} hover className="cursor-pointer">
                                    <TableCell>{vulnerability.name}</TableCell>
                                    <TableCell>{vulnerability.type}</TableCell>
                                    <TableCell>{vulnerability.cvssScore.toFixed(1)}</TableCell>
                                    <TableCell>{renderSeverityBadge(vulnerability.severity)}</TableCell>
                                    <TableCell>
                                        <div className="max-w-[200px] truncate">
                                            {vulnerability.affectedAssets.join(', ')}
                                        </div>
                                    </TableCell>
                                    <TableCell>{vulnerability.discoveryDate.toLocaleDateString()}</TableCell>
                                    <TableCell>
                                        <Chip 
                                            label={vulnerability.isFixed ? "Fixed" : "Not Fixed"} 
                                            color={vulnerability.isFixed ? "success" : "warning"}
                                            size="small"
                                        />
                                    </TableCell>
                                    <TableCell>
                                        <Tooltip title="View details">
                                            <IconButton 
                                                size="small"
                                                onClick={() => handleViewDetail(vulnerability)}
                                            >
                                                <VisibilityIcon />
                                            </IconButton>
                                        </Tooltip>
                                    </TableCell>
                                </TableRow>
                            ))
                        )}
                    </TableBody>
                </Table>
            </TableContainer>

            {/* Vulnerability detail dialog */}
            {selectedVulnerability && (
                <VulnerabilityDetail 
                    vulnerability={selectedVulnerability}
                    open={detailOpen}
                    onClose={() => setDetailOpen(false)}
                    onUpdateStatus={(isFixed: boolean) => {
                        onUpdateStatus(selectedVulnerability.id, isFixed);
                    }}
                />
            )}
        </div>
    );
};

export default VulnerabilityTable;