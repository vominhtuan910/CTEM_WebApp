import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Chip,
  List,
  ListItem,
  ListItemText,
  Divider,
  Switch,
  FormControlLabel
} from '@mui/material';

// Interface should match the Vulnerability interface in VulnerabilityTable
interface Vulnerability {
  id: string;
  name: string;
  type: string;
  cvssScore: number;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  affectedAssets: string[];
  discoveryDate: Date;
  isFixed: boolean;
  description: string;
  recommendations: string;
  cveReferences: string[];
}

interface VulnerabilityDetailProps {
  vulnerability: Vulnerability;
  open: boolean;
  onClose: () => void;
  onUpdateStatus: (isFixed: boolean) => void;
}

const VulnerabilityDetail: React.FC<VulnerabilityDetailProps> = ({
  vulnerability,
  open,
  onClose,
  onUpdateStatus,
}) => {
  const handleStatusChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    onUpdateStatus(event.target.checked);
  };

  // Helper function for severity color
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'error';
      case 'High': return 'error';
      case 'Medium': return 'warning';
      case 'Low': return 'info';
      default: return 'default';
    }
  };

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <div className="flex justify-between items-center">
          <Typography variant="h6">{vulnerability.name}</Typography>
          <Chip 
            label={vulnerability.severity} 
            color={getSeverityColor(vulnerability.severity) as any}
          />
        </div>
      </DialogTitle>
      <DialogContent dividers>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <Typography variant="subtitle2" color="textSecondary">Type</Typography>
            <Typography variant="body1">{vulnerability.type}</Typography>
          </div>
          <div>
            <Typography variant="subtitle2" color="textSecondary">CVSS Score</Typography>
            <Typography variant="body1">{vulnerability.cvssScore.toFixed(1)}</Typography>
          </div>
          <div>
            <Typography variant="subtitle2" color="textSecondary">Discovery Date</Typography>
            <Typography variant="body1">{vulnerability.discoveryDate.toLocaleDateString()}</Typography>
          </div>
          <div>
            <Typography variant="subtitle2" color="textSecondary">Status</Typography>
            <FormControlLabel
              control={<Switch checked={vulnerability.isFixed} onChange={handleStatusChange} color="primary" />}
              label={vulnerability.isFixed ? "Fixed" : "Not Fixed"}
            />
          </div>
        </div>

        <Divider className="my-3" />

        <Typography variant="subtitle1" gutterBottom>Description</Typography>
        <Typography variant="body2" paragraph>{vulnerability.description}</Typography>

        <Typography variant="subtitle1" gutterBottom>Affected Assets</Typography>
        <List dense>
          {vulnerability.affectedAssets.map((asset, index) => (
            <ListItem key={index}>
              <ListItemText primary={asset} />
            </ListItem>
          ))}
        </List>

        <Divider className="my-3" />

        <Typography variant="subtitle1" gutterBottom>Recommendations</Typography>
        <Typography variant="body2" paragraph>{vulnerability.recommendations}</Typography>

        {vulnerability.cveReferences.length > 0 && (
          <>
            <Typography variant="subtitle1" gutterBottom>CVE References</Typography>
            <List dense>
              {vulnerability.cveReferences.map((cve, index) => (
                <ListItem key={index}>
                  <ListItemText 
                    primary={
                      <a 
                        href={`https://nvd.nist.gov/vuln/detail/${cve}`} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:underline"
                      >
                        {cve}
                      </a>
                    } 
                  />
                </ListItem>
              ))}
            </List>
          </>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary">Close</Button>
      </DialogActions>
    </Dialog>
  );
};

export default VulnerabilityDetail;