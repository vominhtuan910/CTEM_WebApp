import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
  Typography,
} from "@mui/material";
import { Sort } from "@mui/icons-material";
import VulnerabilityRow from "./VulnerabilityRow";
import { Vulnerability } from "../../../types/vulnerability.types";

interface VulnerabilityTableViewProps {
  paginatedVulnerabilities: Vulnerability[];
  isLoading: boolean;
  sortField: string;
  sortDirection: string;
  handleSort: (field: string) => void;
  handleVulnerabilityClick: (vulnerability: Vulnerability) => void;
}

export const VulnerabilityTableView = ({
  paginatedVulnerabilities,
  isLoading,
  sortField,
  sortDirection,
  handleSort,
  handleVulnerabilityClick,
}: VulnerabilityTableViewProps) => {
  const renderSortIcon = (field: string) => (
    <Sort
      fontSize="small"
      sx={{
        ml: 0.5,
        color: sortField === field ? "primary.main" : "text.disabled",
        transform:
          sortField === field && sortDirection === "asc"
            ? "rotate(180deg)"
            : "none",
      }}
    />
  );

  return (
    <TableContainer component={Paper} sx={{ mb: 3 }}>
      <Table>
        <TableHead sx={{ bgcolor: "background.default" }}>
          <TableRow>
            <TableCell>Name</TableCell>
            <TableCell>Type</TableCell>
            <TableCell
              onClick={() => handleSort("cvssScore")}
              sx={{ cursor: "pointer" }}
            >
              <Box display="flex" alignItems="center">
                CVSS Score
                {renderSortIcon("cvssScore")}
              </Box>
            </TableCell>
            <TableCell
              onClick={() => handleSort("severityLevel")}
              sx={{ cursor: "pointer" }}
            >
              <Box display="flex" alignItems="center">
                Severity
                {renderSortIcon("severityLevel")}
              </Box>
            </TableCell>
            <TableCell>Affected Assets</TableCell>
            <TableCell
              onClick={() => handleSort("discoveryDate")}
              sx={{ cursor: "pointer" }}
            >
              <Box display="flex" alignItems="center">
                Discovery Date
                {renderSortIcon("discoveryDate")}
              </Box>
            </TableCell>
            <TableCell>Status</TableCell>
            <TableCell align="right">Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {isLoading ? (
            <TableRow>
              <TableCell colSpan={8} align="center" sx={{ py: 3 }}>
                <Typography>Loading vulnerabilities...</Typography>
              </TableCell>
            </TableRow>
          ) : paginatedVulnerabilities.length === 0 ? (
            <TableRow>
              <TableCell colSpan={8} align="center" sx={{ py: 3 }}>
                <Typography>
                  No vulnerabilities found matching your filters
                </Typography>
              </TableCell>
            </TableRow>
          ) : (
            paginatedVulnerabilities.map((vulnerability) => (
              <VulnerabilityRow
                key={vulnerability.id}
                vulnerability={vulnerability}
                onClick={() => handleVulnerabilityClick(vulnerability)}
              />
            ))
          )}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default VulnerabilityTableView;
