import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Chip,
  Grid,
  Divider,
  Link,
  IconButton,
  Tooltip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Paper,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  alpha,
  useTheme,
} from "@mui/material";
import {
  Security as SecurityIcon,
  BugReport as BugReportIcon,
  CalendarToday as CalendarTodayIcon,
  Computer as ComputerIcon,
  Assignment as AssignmentIcon,
  Close as CloseIcon,
  Save as SaveIcon,
  FileCopy as FileCopyIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  LocalOffer as LocalOfferIcon,
  Timeline as TimelineIcon,
  Assessment as AssessmentIcon,
} from "@mui/icons-material";
import { format } from "date-fns";
import { Vulnerability } from "../../../types/vulnerability.types";

interface VulnerabilityDetailProps {
  vulnerability: Vulnerability;
  open: boolean;
  onClose: () => void;
  onStatusChange: (id: string, status: string) => void;
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel = (props: TabPanelProps) => {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`vuln-detail-tabpanel-${index}`}
      aria-labelledby={`vuln-detail-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ py: 2 }}>{children}</Box>}
    </div>
  );
};

const VulnerabilityDetail: React.FC<VulnerabilityDetailProps> = ({
  vulnerability,
  open,
  onClose,
  onStatusChange,
}) => {
  const theme = useTheme();
  const [status, setStatus] = useState(vulnerability.status);
  const [isEditing, setIsEditing] = useState(false);
  const [notes, setNotes] = useState("");
  const [tabValue, setTabValue] = useState(0);
  const [showVector, setShowVector] = useState(false);

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleStatusChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    setStatus(event.target.value as "Fixed" | "Not Fixed" | "In Progress");
  };

  const handleSave = () => {
    onStatusChange(vulnerability.id, status);
    setIsEditing(false);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical":
        return theme.palette.error.main;
      case "High":
        return theme.palette.warning.main;
      case "Medium":
        return theme.palette.info.main;
      case "Low":
        return theme.palette.success.main;
      default:
        return theme.palette.text.secondary;
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "Critical":
        return <ErrorIcon color="error" />;
      case "High":
        return <WarningIcon color="warning" />;
      case "Medium":
        return <InfoIcon color="info" />;
      case "Low":
        return <CheckCircleIcon color="success" />;
      default:
        return <InfoIcon color="disabled" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Fixed":
        return theme.palette.success.main;
      case "Not Fixed":
        return theme.palette.error.main;
      case "In Progress":
        return theme.palette.warning.main;
      default:
        return theme.palette.text.secondary;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "Fixed":
        return <CheckCircleIcon color="success" />;
      case "Not Fixed":
        return <ErrorIcon color="error" />;
      case "In Progress":
        return <TimelineIcon color="warning" />;
      default:
        return null;
    }
  };

  const formatCVSS = (score: number) => {
    if (score >= 9.0) return { color: "error.main", text: "Critical" };
    if (score >= 7.0) return { color: "warning.main", text: "High" };
    if (score >= 4.0) return { color: "info.main", text: "Medium" };
    return { color: "success.main", text: "Low" };
  };

  const cvssInfo = formatCVSS(vulnerability.cvssScore);

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      scroll="paper"
      PaperProps={{
        sx: {
          borderRadius: 2,
          overflow: "hidden",
        },
      }}
    >
      <DialogTitle
        sx={{
          bgcolor: (theme) =>
            alpha(getSeverityColor(vulnerability.severityLevel), 0.1),
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          borderBottom: "1px solid",
          borderColor: "divider",
          p: 2,
        }}
      >
        <Box display="flex" alignItems="center">
          {getSeverityIcon(vulnerability.severityLevel)}
          <Typography variant="h6" component="div" sx={{ ml: 1 }}>
            {vulnerability.name}
          </Typography>
          <Chip
            label={vulnerability.severityLevel}
            size="small"
            sx={{
              ml: 2,
              bgcolor: getSeverityColor(vulnerability.severityLevel),
              color: "white",
              fontWeight: "bold",
            }}
          />
        </Box>
        <IconButton onClick={onClose} size="small">
          <CloseIcon />
        </IconButton>
      </DialogTitle>

      <DialogContent sx={{ p: 0 }}>
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
          sx={{
            borderBottom: 1,
            borderColor: "divider",
            bgcolor: (theme) => alpha(theme.palette.background.default, 0.5),
          }}
        >
          <Tab icon={<BugReportIcon />} iconPosition="start" label="Overview" />
          <Tab
            icon={<AssessmentIcon />}
            iconPosition="start"
            label="Technical Details"
          />
          <Tab
            icon={<AssignmentIcon />}
            iconPosition="start"
            label="Remediation"
          />
        </Tabs>

        <Box sx={{ p: 3 }}>
          <TabPanel value={tabValue} index={0}>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12, md: 8 }}>
                <Typography
                  variant="subtitle1"
                  fontWeight="medium"
                  gutterBottom
                >
                  Description
                </Typography>
                <Typography variant="body2" paragraph>
                  {vulnerability.description}
                </Typography>

                <Typography
                  variant="subtitle1"
                  fontWeight="medium"
                  gutterBottom
                >
                  Affected Assets
                </Typography>
                <Box sx={{ mb: 2, display: "flex", flexWrap: "wrap", gap: 1 }}>
                  {vulnerability.affectedAssets.map((asset, index) => (
                    <Chip
                      key={index}
                      icon={<ComputerIcon />}
                      label={asset}
                      variant="outlined"
                      size="small"
                    />
                  ))}
                </Box>

                {vulnerability.tags && vulnerability.tags.length > 0 && (
                  <>
                    <Typography variant="subtitle2" gutterBottom>
                      Tags
                    </Typography>
                    <Box
                      sx={{
                        mb: 2,
                        display: "flex",
                        flexWrap: "wrap",
                        gap: 0.5,
                      }}
                    >
                      {vulnerability.tags.map((tag, index) => (
                        <Chip
                          key={index}
                          icon={<LocalOfferIcon sx={{ fontSize: "0.8rem" }} />}
                          label={tag}
                          size="small"
                          sx={{
                            bgcolor: (theme) =>
                              alpha(theme.palette.primary.main, 0.1),
                            fontSize: "0.75rem",
                          }}
                        />
                      ))}
                    </Box>
                  </>
                )}
              </Grid>

              <Grid size={{ xs: 12, md: 4 }}>
                <Paper
                  variant="outlined"
                  sx={{
                    p: 2,
                    bgcolor: (theme) =>
                      alpha(theme.palette.background.default, 0.5),
                    borderRadius: 2,
                  }}
                >
                  <Typography
                    variant="subtitle2"
                    color="text.secondary"
                    gutterBottom
                  >
                    Vulnerability Details
                  </Typography>

                  <List dense disablePadding>
                    <ListItem disableGutters>
                      <ListItemIcon sx={{ minWidth: 36 }}>
                        <AssessmentIcon fontSize="small" color="primary" />
                      </ListItemIcon>
                      <ListItemText
                        primary="CVSS Score"
                        secondary={
                          <Box
                            component="span"
                            sx={{ color: cvssInfo.color, fontWeight: "bold" }}
                          >
                            {vulnerability.cvssScore} - {cvssInfo.text}
                          </Box>
                        }
                      />
                    </ListItem>

                    <ListItem disableGutters>
                      <ListItemIcon sx={{ minWidth: 36 }}>
                        <BugReportIcon fontSize="small" color="primary" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Type"
                        secondary={vulnerability.type}
                      />
                    </ListItem>

                    <ListItem disableGutters>
                      <ListItemIcon sx={{ minWidth: 36 }}>
                        <CalendarTodayIcon fontSize="small" color="primary" />
                      </ListItemIcon>
                      <ListItemText
                        primary="Discovery Date"
                        secondary={format(
                          new Date(vulnerability.discoveryDate),
                          "MMM dd, yyyy"
                        )}
                      />
                    </ListItem>

                    <ListItem disableGutters>
                      <ListItemIcon sx={{ minWidth: 36 }}>
                        {getStatusIcon(vulnerability.status)}
                      </ListItemIcon>
                      <ListItemText
                        primary="Status"
                        secondary={
                          <Box
                            component="span"
                            sx={{
                              color: getStatusColor(vulnerability.status),
                              fontWeight: "medium",
                            }}
                          >
                            {vulnerability.status}
                          </Box>
                        }
                      />
                    </ListItem>

                    {vulnerability.assignedTo && (
                      <ListItem disableGutters>
                        <ListItemIcon sx={{ minWidth: 36 }}>
                          <AssignmentIcon fontSize="small" color="primary" />
                        </ListItemIcon>
                        <ListItemText
                          primary="Assigned To"
                          secondary={vulnerability.assignedTo}
                        />
                      </ListItem>
                    )}
                  </List>

                  <Divider sx={{ my: 2 }} />

                  <Typography
                    variant="subtitle2"
                    color="text.secondary"
                    gutterBottom
                  >
                    References
                  </Typography>

                  <List dense disablePadding>
                    {vulnerability.cveReferences.map((ref, index) => (
                      <ListItem disableGutters key={index}>
                        <ListItemIcon sx={{ minWidth: 36 }}>
                          <SecurityIcon fontSize="small" color="primary" />
                        </ListItemIcon>
                        <ListItemText
                          primary={
                            <Link
                              href={`https://nvd.nist.gov/vuln/detail/${ref}`}
                              target="_blank"
                              underline="hover"
                            >
                              {ref}
                            </Link>
                          }
                        />
                      </ListItem>
                    ))}
                  </List>
                </Paper>
              </Grid>
            </Grid>
          </TabPanel>

          <TabPanel value={tabValue} index={1}>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12, md: 6 }}>
                <Typography
                  variant="subtitle1"
                  fontWeight="medium"
                  gutterBottom
                >
                  CVSS Vector
                </Typography>

                <Box sx={{ mb: 3, display: "flex", alignItems: "center" }}>
                  <Paper
                    variant="outlined"
                    sx={{
                      p: 1.5,
                      flex: 1,
                      fontFamily: "monospace",
                      fontSize: "0.9rem",
                      bgcolor: (theme) =>
                        alpha(theme.palette.background.default, 0.7),
                      borderRadius: 1,
                    }}
                  >
                    {vulnerability.vector || "No vector information available"}
                  </Paper>
                  <Tooltip
                    title={showVector ? "Hide explanation" : "Show explanation"}
                  >
                    <IconButton onClick={() => setShowVector(!showVector)}>
                      {showVector ? <VisibilityOffIcon /> : <VisibilityIcon />}
                    </IconButton>
                  </Tooltip>
                  <Tooltip title="Copy vector">
                    <IconButton
                      onClick={() =>
                        navigator.clipboard.writeText(
                          vulnerability.vector || ""
                        )
                      }
                    >
                      <FileCopyIcon />
                    </IconButton>
                  </Tooltip>
                </Box>

                {showVector && vulnerability.vector && (
                  <Paper
                    variant="outlined"
                    sx={{
                      p: 2,
                      mb: 3,
                      bgcolor: (theme) => alpha(theme.palette.info.main, 0.05),
                      borderRadius: 2,
                    }}
                  >
                    <Typography variant="subtitle2" gutterBottom>
                      Vector Explanation
                    </Typography>
                    <Typography variant="body2">
                      {vulnerability.vector
                        .split("/")
                        .map((component, index) => {
                          if (index === 0) return null;
                          const [key, value] = component.split(":");
                          let explanation = "";

                          switch (key) {
                            case "AV":
                              explanation = `Attack Vector: ${
                                value === "N"
                                  ? "Network"
                                  : value === "A"
                                  ? "Adjacent"
                                  : value === "L"
                                  ? "Local"
                                  : value === "P"
                                  ? "Physical"
                                  : value
                              }`;
                              break;
                            case "AC":
                              explanation = `Attack Complexity: ${
                                value === "L"
                                  ? "Low"
                                  : value === "H"
                                  ? "High"
                                  : value
                              }`;
                              break;
                            case "PR":
                              explanation = `Privileges Required: ${
                                value === "N"
                                  ? "None"
                                  : value === "L"
                                  ? "Low"
                                  : value === "H"
                                  ? "High"
                                  : value
                              }`;
                              break;
                            case "UI":
                              explanation = `User Interaction: ${
                                value === "N"
                                  ? "None"
                                  : value === "R"
                                  ? "Required"
                                  : value
                              }`;
                              break;
                            case "S":
                              explanation = `Scope: ${
                                value === "U"
                                  ? "Unchanged"
                                  : value === "C"
                                  ? "Changed"
                                  : value
                              }`;
                              break;
                            case "C":
                              explanation = `Confidentiality: ${
                                value === "N"
                                  ? "None"
                                  : value === "L"
                                  ? "Low"
                                  : value === "H"
                                  ? "High"
                                  : value
                              }`;
                              break;
                            case "I":
                              explanation = `Integrity: ${
                                value === "N"
                                  ? "None"
                                  : value === "L"
                                  ? "Low"
                                  : value === "H"
                                  ? "High"
                                  : value
                              }`;
                              break;
                            case "A":
                              explanation = `Availability: ${
                                value === "N"
                                  ? "None"
                                  : value === "L"
                                  ? "Low"
                                  : value === "H"
                                  ? "High"
                                  : value
                              }`;
                              break;
                            default:
                              explanation = `${key}: ${value}`;
                          }

                          return (
                            <Box key={index} sx={{ mb: 0.5 }}>
                              <Typography
                                variant="body2"
                                component="span"
                                fontWeight="medium"
                              >
                                {key}:{value}
                              </Typography>
                              {" - "}
                              <Typography variant="body2" component="span">
                                {explanation}
                              </Typography>
                            </Box>
                          );
                        })}
                    </Typography>
                  </Paper>
                )}
              </Grid>

              <Grid size={{ xs: 12, md: 6 }}>
                <Typography
                  variant="subtitle1"
                  fontWeight="medium"
                  gutterBottom
                >
                  Technical Information
                </Typography>

                <Paper
                  variant="outlined"
                  sx={{
                    p: 2,
                    mb: 3,
                    bgcolor: (theme) =>
                      alpha(theme.palette.background.default, 0.5),
                    borderRadius: 2,
                  }}
                >
                  <Grid container spacing={2}>
                    <Grid size={{ xs: 6 }}>
                      <Typography variant="subtitle2" color="text.secondary">
                        Exploit Available
                      </Typography>
                      <Typography
                        variant="body1"
                        fontWeight="medium"
                        color={
                          vulnerability.exploitAvailable
                            ? "error.main"
                            : "text.primary"
                        }
                      >
                        {vulnerability.exploitAvailable ? "Yes" : "No"}
                      </Typography>
                    </Grid>

                    <Grid size={{ xs: 6 }}>
                      <Typography variant="subtitle2" color="text.secondary">
                        Patch Available
                      </Typography>
                      <Typography
                        variant="body1"
                        fontWeight="medium"
                        color={
                          vulnerability.patchAvailable
                            ? "success.main"
                            : "text.primary"
                        }
                      >
                        {vulnerability.patchAvailable ? "Yes" : "No"}
                      </Typography>
                    </Grid>

                    <Grid size={{ xs: 12 }}>
                      <Divider sx={{ my: 1 }} />
                      <Typography variant="subtitle2" color="text.secondary">
                        Last Updated
                      </Typography>
                      <Typography variant="body2">
                        {vulnerability.lastUpdated
                          ? format(
                              new Date(vulnerability.lastUpdated),
                              "MMM dd, yyyy HH:mm"
                            )
                          : "Not available"}
                      </Typography>
                    </Grid>
                  </Grid>
                </Paper>
              </Grid>
            </Grid>
          </TabPanel>

          <TabPanel value={tabValue} index={2}>
            <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
              Recommended Actions
            </Typography>
            <Typography variant="body2" paragraph>
              {vulnerability.recommendations}
            </Typography>

            <Box sx={{ mt: 4 }}>
              <Typography variant="subtitle1" fontWeight="medium" gutterBottom>
                Status Management
              </Typography>

              <Paper
                variant="outlined"
                sx={{
                  p: 3,
                  bgcolor: (theme) =>
                    alpha(theme.palette.background.default, 0.5),
                  borderRadius: 2,
                }}
              >
                <Grid container spacing={3} alignItems="flex-start">
                  <Grid size={{ xs: 12, md: 6 }}>
                    <FormControl fullWidth size="small">
                      <InputLabel id="status-select-label">Status</InputLabel>
                      <Select
                        labelId="status-select-label"
                        id="status-select"
                        value={status}
                        label="Status"
                        onChange={handleStatusChange as any}
                      >
                        <MenuItem value="Fixed">
                          <Box display="flex" alignItems="center">
                            <CheckCircleIcon
                              fontSize="small"
                              color="success"
                              sx={{ mr: 1 }}
                            />
                            Fixed
                          </Box>
                        </MenuItem>
                        <MenuItem value="Not Fixed">
                          <Box display="flex" alignItems="center">
                            <ErrorIcon
                              fontSize="small"
                              color="error"
                              sx={{ mr: 1 }}
                            />
                            Not Fixed
                          </Box>
                        </MenuItem>
                        <MenuItem value="In Progress">
                          <Box display="flex" alignItems="center">
                            <TimelineIcon
                              fontSize="small"
                              color="warning"
                              sx={{ mr: 1 }}
                            />
                            In Progress
                          </Box>
                        </MenuItem>
                      </Select>
                    </FormControl>

                    <Box sx={{ mt: 2 }}>
                      <Button
                        variant="contained"
                        color="primary"
                        onClick={handleSave}
                        disabled={status === vulnerability.status}
                        startIcon={<SaveIcon />}
                      >
                        Update Status
                      </Button>
                    </Box>
                  </Grid>

                  <Grid size={{ xs: 12, md: 6 }}>
                    <TextField
                      fullWidth
                      label="Notes"
                      multiline
                      rows={4}
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      placeholder="Add notes about remediation steps taken..."
                      variant="outlined"
                      size="small"
                    />
                  </Grid>
                </Grid>
              </Paper>
            </Box>
          </TabPanel>
        </Box>
      </DialogContent>

      <DialogActions
        sx={{ p: 2, borderTop: "1px solid", borderColor: "divider" }}
      >
        <Button onClick={onClose} color="inherit">
          Close
        </Button>
        <Button
          variant="contained"
          color="primary"
          onClick={handleSave}
          disabled={status === vulnerability.status}
        >
          Save Changes
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default VulnerabilityDetail;
