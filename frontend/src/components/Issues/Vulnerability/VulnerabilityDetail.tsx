import { useState } from 'react';
import { Vulnerability } from '../../../types/vulnerability.types';

import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Chip,
  List,
  ListItem,
  ListItemText,
  Divider,
  FormControl,
  Select,
  SelectChangeEvent,
  MenuItem,
  Grid,
  Box,
  IconButton,
  Paper,
  Alert,
  Tooltip,
  Link,
  TextField,
  Tab,
  Tabs,
  ListItemIcon
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import SecurityIcon from '@mui/icons-material/Security';
import DescriptionIcon from '@mui/icons-material/Description';
import ComputerIcon from '@mui/icons-material/Computer';
import BuildIcon from '@mui/icons-material/Build';
import HistoryIcon from '@mui/icons-material/History';
import LinkIcon from '@mui/icons-material/Link';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ErrorIcon from '@mui/icons-material/Error';
import WarningIcon from '@mui/icons-material/Warning';
import InfoIcon from '@mui/icons-material/Info';
import HourglassEmptyIcon from '@mui/icons-material/HourglassEmpty';
import { format } from 'date-fns';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel = (props: TabPanelProps) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`vulnerability-tabpanel-${index}`}
      aria-labelledby={`vulnerability-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ pt: 2 }}>
          {children}
        </Box>
      )}
    </div>
  );
};

interface VulnerabilityDetailProps {
  vulnerability: Vulnerability;
  open: boolean;
  onClose: () => void;
  onUpdateStatus: (status: string) => void;
}

const VulnerabilityDetail: React.FC<VulnerabilityDetailProps> = ({
  vulnerability,
  open,
  onClose,
  onUpdateStatus,
}) => {
  const [status, setStatus] = useState<string>(vulnerability.status);
  const [notes, setNotes] = useState<string>('');
  const [tabValue, setTabValue] = useState(0);

  const handleStatusChange = (event: SelectChangeEvent<string>) => {
    const newStatus = event.target.value;
    setStatus(newStatus);
    onUpdateStatus(newStatus);
  };

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // Helper function for severity color and icon
  const getSeverityInfo = (severity: string) => {
    switch (severity) {
      case 'Critical': 
        return { color: 'error', icon: <ErrorIcon color="error" /> };
      case 'High': 
        return { color: 'warning', icon: <WarningIcon color="warning" /> };
      case 'Medium': 
        return { color: 'info', icon: <InfoIcon color="info" /> };
      case 'Low': 
        return { color: 'success', icon: <CheckCircleIcon color="success" /> };
      default: 
        return { color: 'default', icon: <InfoIcon color="disabled" /> };
    }
  };

  // Helper function for status icon
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Fixed': return <CheckCircleIcon color="success" />;
      case 'Not Fixed': return <ErrorIcon color="error" />;
      case 'In Progress': return <HourglassEmptyIcon color="warning" />;
      default: return <InfoIcon color="disabled" />;
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="md" 
      fullWidth
      scroll="paper"
      PaperProps={{
        sx: {
          borderRadius: 2,
          boxShadow: 24
        }
      }}
    >
      <DialogTitle sx={{ borderBottom: '1px solid', borderColor: 'divider', py: 2 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Box display="flex" alignItems="center">
            {getSeverityInfo(vulnerability.severityLevel).icon}
            <Typography variant="h6" component="span" sx={{ ml: 1 }}>
              {vulnerability.name}
            </Typography>
          </Box>
          <Box display="flex" alignItems="center" gap={1}>
          <Chip 
            label={vulnerability.severityLevel} 
              color={getSeverityInfo(vulnerability.severityLevel).color as any}
              size="small"
            />
            <IconButton onClick={onClose} size="small">
              <CloseIcon />
            </IconButton>
          </Box>
        </Box>
      </DialogTitle>

      <Tabs
        value={tabValue}
        onChange={handleTabChange}
        aria-label="vulnerability detail tabs"
        variant="fullWidth"
        sx={{ borderBottom: 1, borderColor: 'divider' }}
      >
        <Tab icon={<DescriptionIcon />} label="Overview" />
        <Tab icon={<BuildIcon />} label="Remediation" />
        <Tab icon={<HistoryIcon />} label="Activity" />
      </Tabs>

      <DialogContent dividers sx={{ p: 3 }}>
        <TabPanel value={tabValue} index={0}>
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '2fr 1fr' }, gap: 3 }}>
            <Box>
              <Paper elevation={0} variant="outlined" sx={{ p: 2, mb: 3 }}>
                <Typography variant="subtitle1" gutterBottom fontWeight="bold">Description</Typography>
                <Typography variant="body2" paragraph>
                  {vulnerability.description}
                </Typography>

                <Typography variant="subtitle1" gutterBottom fontWeight="bold">CVSS Score</Typography>
                <Box display="flex" alignItems="center" mb={2}>
                  <Box 
                    sx={{ 
                      width: 50, 
                      height: 50, 
                      borderRadius: '50%', 
                      bgcolor: getSeverityInfo(vulnerability.severityLevel).color + '.main',
                      color: 'white',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontWeight: 'bold',
                      mr: 2
                    }}
                  >
                    {vulnerability.cvssScore.toFixed(1)}
                  </Box>
                  <Box>
                    <Typography variant="body2" color="text.secondary">
                      Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Base Score: {vulnerability.cvssScore.toFixed(1)} ({vulnerability.severityLevel})
                    </Typography>
                  </Box>
                </Box>
              </Paper>

              <Paper elevation={0} variant="outlined" sx={{ p: 2 }}>
                <Typography variant="subtitle1" gutterBottom fontWeight="bold">Affected Assets</Typography>
                <List dense disablePadding>
                  {vulnerability.affectedAssets.map((asset, index) => (
                    <ListItem key={index} disablePadding sx={{ py: 0.5 }}>
                      <ListItemIcon sx={{ minWidth: 36 }}>
                        <ComputerIcon fontSize="small" color="action" />
                      </ListItemIcon>
                      <ListItemText primary={asset} />
                    </ListItem>
                  ))}
                </List>
              </Paper>
            </Box>

            <Box>
              <Paper elevation={0} variant="outlined" sx={{ p: 2, mb: 3 }}>
                <Typography variant="subtitle2" color="text.secondary" gutterBottom>Status</Typography>
                <FormControl variant="outlined" size="small" fullWidth>
                  <Select
                    value={status}
                    onChange={handleStatusChange}
                    startAdornment={getStatusIcon(status)}
                  >
                    <MenuItem value="Fixed">Fixed</MenuItem>
                    <MenuItem value="Not Fixed">Not Fixed</MenuItem>
                    <MenuItem value="In Progress">In Progress</MenuItem>
                  </Select>
                </FormControl>

                <Box mt={3}>
                  <Typography variant="subtitle2" color="text.secondary" gutterBottom>Type</Typography>
                  <Typography variant="body1">{vulnerability.type}</Typography>
                </Box>

                <Box mt={3}>
                  <Typography variant="subtitle2" color="text.secondary" gutterBottom>Discovery Date</Typography>
                  <Typography variant="body1">
                    {vulnerability.discoveryDate instanceof Date 
                      ? format(vulnerability.discoveryDate, 'MMM d, yyyy')
                      : format(new Date(vulnerability.discoveryDate), 'MMM d, yyyy')}
                  </Typography>
                </Box>
              </Paper>

              {vulnerability.cveReferences.length > 0 && (
                <Paper elevation={0} variant="outlined" sx={{ p: 2 }}>
                  <Typography variant="subtitle2" color="text.secondary" gutterBottom>References</Typography>
                  <List dense disablePadding>
                    {vulnerability.cveReferences.map((cve, index) => (
                      <ListItem key={index} disablePadding sx={{ py: 0.5 }}>
                        <ListItemIcon sx={{ minWidth: 36 }}>
                          <LinkIcon fontSize="small" color="action" />
                        </ListItemIcon>
                        <ListItemText 
                          primary={
                            <Link 
                              href={`https://nvd.nist.gov/vuln/detail/${cve}`} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              underline="hover"
                              color="primary"
                            >
                              {cve}
                            </Link>
                          } 
                        />
                      </ListItem>
                    ))}
                  </List>
                </Paper>
              )}
            </Box>
          </Box>
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          <Alert severity="info" sx={{ mb: 3 }}>
            Follow these recommendations to remediate the vulnerability.
          </Alert>
          
          <Paper elevation={0} variant="outlined" sx={{ p: 2, mb: 3 }}>
            <Typography variant="subtitle1" gutterBottom fontWeight="bold">Recommendations</Typography>
            <Typography variant="body2" paragraph>
              {vulnerability.recommendations}
            </Typography>
          </Paper>
          
          <Paper elevation={0} variant="outlined" sx={{ p: 2 }}>
            <Typography variant="subtitle1" gutterBottom fontWeight="bold">Notes</Typography>
            <TextField
              multiline
              rows={4}
              placeholder="Add your remediation notes here..."
              fullWidth
              variant="outlined"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              size="small"
            />
          </Paper>
        </TabPanel>

        <TabPanel value={tabValue} index={2}>
          <Paper elevation={0} variant="outlined" sx={{ p: 2 }}>
            <Typography variant="subtitle1" gutterBottom fontWeight="bold">Activity Timeline</Typography>
            
            <List>
              <ListItem sx={{ pb: 2 }}>
                <ListItemIcon>
                  <SecurityIcon color="primary" />
                </ListItemIcon>
                <ListItemText 
                  primary="Vulnerability detected" 
                  secondary={format(new Date(vulnerability.discoveryDate), 'MMM d, yyyy - h:mm a')}
                />
              </ListItem>
              
              <ListItem sx={{ pb: 2 }}>
                <ListItemIcon>
                  <DescriptionIcon color="action" />
                </ListItemIcon>
                <ListItemText 
                  primary="Initial assessment completed" 
                  secondary={format(new Date(vulnerability.discoveryDate.getTime() + 86400000), 'MMM d, yyyy - h:mm a')}
                />
              </ListItem>
              
              {vulnerability.status === 'Fixed' && (
                <ListItem>
                  <ListItemIcon>
                    <CheckCircleIcon color="success" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Vulnerability fixed" 
                    secondary={format(new Date(), 'MMM d, yyyy - h:mm a')}
                  />
                </ListItem>
              )}
              
              {vulnerability.status === 'In Progress' && (
                <ListItem>
                  <ListItemIcon>
                    <HourglassEmptyIcon color="warning" />
                  </ListItemIcon>
                  <ListItemText 
                    primary="Remediation in progress" 
                    secondary={format(new Date(Date.now() - 172800000), 'MMM d, yyyy - h:mm a')}
                  />
                </ListItem>
              )}
            </List>
          </Paper>
        </TabPanel>
      </DialogContent>
      
      <DialogActions sx={{ px: 3, py: 2 }}>
        <Button onClick={onClose} variant="outlined">Close</Button>
        {tabValue === 1 && (
          <Button 
            variant="contained" 
            color="primary" 
            disabled={!notes.trim()}
            onClick={() => {
              alert('Notes saved');
              setNotes('');
            }}
          >
            Save Notes
          </Button>
        )}
      </DialogActions>
    </Dialog>
  );
};

export default VulnerabilityDetail;