import { Box, Chip, IconButton, Tooltip } from '@mui/material';
import VisibilityIcon from '@mui/icons-material/Visibility';
import { Vulnerability } from './VulnInterface';

interface VulnerabilityRowProps {
    vulnerability: Vulnerability;
    onViewDetails: (vulnerability: Vulnerability) => void;
    onClick: () => void;
}

const VulnerabilityRow: React.FC<VulnerabilityRowProps> = ({ vulnerability, onViewDetails }) => {
    // Determine severity color
    const getSeverityColor = (severity: string): string => {
        switch (severity) {
            case 'Critical': return 'bg-red-600';
            case 'High': return 'bg-orange-500';
            case 'Medium': return 'bg-yellow-500';
            case 'Low': return 'bg-blue-500';
            default: return 'bg-gray-500';
        }
    };

    // Format date
    const formatDate = (date: Date | string): string => {
        return date instanceof Date 
            ? date.toLocaleDateString()
            : new Date(date).toLocaleDateString();
    };

    return (
        <tr className="border-b border-gray-200 hover:bg-gray-50">
            <td className="px-6 py-4 whitespace-nowrap">{vulnerability.name}</td>
            <td className="px-6 py-4 whitespace-nowrap">{vulnerability.type}</td>
            <td className="px-6 py-4 whitespace-nowrap font-medium">
                {vulnerability.cvssScore.toFixed(1)}
            </td>
            <td className="px-6 py-4 whitespace-nowrap">
                <Chip 
                    label={vulnerability.severityLevel}
                    className={`text-white ${getSeverityColor(vulnerability.severityLevel)}`}
                    size="small"
                />
            </td>
            <td className="px-6 py-4">
                {vulnerability.affectedAssets.length > 2 ? (
                    <Tooltip title={vulnerability.affectedAssets.join(', ')}>
                        <Box>
                            {vulnerability.affectedAssets.slice(0, 2).join(', ')} 
                            <span className="text-gray-500"> +{vulnerability.affectedAssets.length - 2} more</span>
                        </Box>
                    </Tooltip>
                ) : (
                    vulnerability.affectedAssets.join(', ')
                )}
            </td>
            <td className="px-6 py-4 whitespace-nowrap">
                {formatDate(vulnerability.discoveryDate)}
            </td>
            <td className="px-6 py-4 whitespace-nowrap">
                <Chip 
                    label={vulnerability.status}
                    color={vulnerability.status === 'Fixed' ? 'success' : 'error'}
                    size="small"
                />
            </td>
            <td className="px-6 py-4 whitespace-nowrap text-right">
                <IconButton
                    size="small"
                    onClick={() => onViewDetails(vulnerability)}
                    aria-label="View details"
                    className="text-blue-600 hover:text-blue-800"
                >
                    <VisibilityIcon />
                </IconButton>
            </td>
        </tr>
    );
};

export default VulnerabilityRow;