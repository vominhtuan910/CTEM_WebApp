import React from 'react';
import { 
  TableRow, 
  TableCell, 
  Chip, 
  IconButton, 
  Typography, 
  Box,
  Tooltip,
  useTheme,
  alpha,
  LinearProgress
} from '@mui/material';
import { 
  Security as SecurityIcon,
  OpenInNew as OpenInNewIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Timeline as TimelineIcon
} from '@mui/icons-material';
import { format } from 'date-fns';
import { Vulnerability } from '../../../types/vulnerability.types';

interface VulnerabilityRowProps {
  vulnerability: Vulnerability;
  onClick: (vulnerability: Vulnerability) => void;
}

const VulnerabilityRow: React.FC<VulnerabilityRowProps> = ({ vulnerability, onClick }) => {
  const theme = useTheme();
  
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical':
        return theme.palette.error.main;
      case 'High':
        return theme.palette.warning.main;
      case 'Medium':
        return theme.palette.info.main;
      case 'Low':
        return theme.palette.success.main;
      default:
        return theme.palette.text.secondary;
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'Critical':
        return <ErrorIcon fontSize="small" color="error" />;
      case 'High':
        return <WarningIcon fontSize="small" color="warning" />;
      case 'Medium':
        return <InfoIcon fontSize="small" color="info" />;
      case 'Low':
        return <CheckCircleIcon fontSize="small" color="success" />;
      default:
        return <InfoIcon fontSize="small" color="disabled" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Fixed':
        return theme.palette.success.main;
      case 'Not Fixed':
        return theme.palette.error.main;
      case 'In Progress':
        return theme.palette.warning.main;
      default:
        return theme.palette.text.secondary;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Fixed':
        return <CheckCircleIcon fontSize="small" color="success" />;
      case 'Not Fixed':
        return <ErrorIcon fontSize="small" color="error" />;
      case 'In Progress':
        return <TimelineIcon fontSize="small" color="warning" />;
      default:
        return null;
    }
  };

  const getCvssProgressColor = (score: number) => {
    if (score >= 9.0) return theme.palette.error.main;
    if (score >= 7.0) return theme.palette.warning.main;
    if (score >= 4.0) return theme.palette.info.main;
    return theme.palette.success.main;
  };

  const handleClick = () => {
    onClick(vulnerability);
  };

  return (
    <TableRow 
      hover 
      onClick={handleClick} 
      sx={{ 
        cursor: 'pointer',
        '&:hover': {
          bgcolor: (theme) => alpha(theme.palette.primary.main, 0.05)
        },
        transition: 'background-color 0.2s'
      }}
    >
      <TableCell>
        <Box display="flex" alignItems="center">
          {getSeverityIcon(vulnerability.severityLevel)}
          <Typography variant="body2" sx={{ ml: 1, fontWeight: 'medium' }}>
            {vulnerability.name}
          </Typography>
        </Box>
        <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mt: 0.5 }}>
          {vulnerability.type}
        </Typography>
      </TableCell>
      
      <TableCell>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Tooltip title={`CVSS Score: ${vulnerability.cvssScore}`}>
            <Box sx={{ width: '100%', maxWidth: 100, display: 'flex', alignItems: 'center' }}>
              <Box sx={{ width: '100%', mr: 1 }}>
                <LinearProgress
                  variant="determinate"
                  value={vulnerability.cvssScore * 10}
                  sx={{
                    height: 8,
                    borderRadius: 5,
                    bgcolor: alpha(getCvssProgressColor(vulnerability.cvssScore), 0.2),
                    '& .MuiLinearProgress-bar': {
                      bgcolor: getCvssProgressColor(vulnerability.cvssScore),
                      borderRadius: 5,
                    }
                  }}
                />
              </Box>
              <Box sx={{ minWidth: 35 }}>
                <Typography variant="body2" color="text.secondary">{vulnerability.cvssScore}</Typography>
              </Box>
            </Box>
          </Tooltip>
        </Box>
      </TableCell>
      
      <TableCell>
        <Chip 
          label={vulnerability.severityLevel} 
          size="small" 
          sx={{ 
            bgcolor: alpha(getSeverityColor(vulnerability.severityLevel), 0.1),
            color: getSeverityColor(vulnerability.severityLevel),
            fontWeight: 'bold',
            borderRadius: 1
          }} 
        />
      </TableCell>
      
      <TableCell>
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
          {vulnerability.affectedAssets.slice(0, 2).map((asset, index) => (
            <Chip 
              key={index} 
              label={asset} 
              size="small" 
              variant="outlined"
              sx={{ borderRadius: 1 }}
            />
          ))}
          {vulnerability.affectedAssets.length > 2 && (
            <Tooltip title={vulnerability.affectedAssets.slice(2).join(', ')}>
              <Chip 
                label={`+${vulnerability.affectedAssets.length - 2}`} 
                size="small" 
                sx={{ borderRadius: 1 }}
              />
            </Tooltip>
          )}
        </Box>
      </TableCell>
      
      <TableCell>
        <Typography variant="body2">
          {format(new Date(vulnerability.discoveryDate), 'MMM dd, yyyy')}
        </Typography>
      </TableCell>
      
      <TableCell>
        <Box display="flex" alignItems="center">
          {getStatusIcon(vulnerability.status)}
          <Typography 
            variant="body2" 
            sx={{ 
              ml: 1, 
              color: getStatusColor(vulnerability.status),
              fontWeight: 'medium'
            }}
          >
            {vulnerability.status}
          </Typography>
        </Box>
      </TableCell>
      
      <TableCell align="right">
        <Tooltip title="View details">
          <IconButton 
            size="small" 
            onClick={handleClick}
            sx={{ 
              bgcolor: (theme) => alpha(theme.palette.primary.main, 0.1),
              '&:hover': {
                bgcolor: (theme) => alpha(theme.palette.primary.main, 0.2),
              }
            }}
          >
            <OpenInNewIcon fontSize="small" />
          </IconButton>
        </Tooltip>
      </TableCell>
    </TableRow>
  );
};

export default VulnerabilityRow;