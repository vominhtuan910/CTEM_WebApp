import React from 'react';
import { TableRow, TableCell, Chip, IconButton, Tooltip, Box } from '@mui/material';
import VisibilityIcon from '@mui/icons-material/Visibility';
import SecurityIcon from '@mui/icons-material/Security';
import { Vulnerability } from '../../../types/vulnerability.types';

interface VulnerabilityRowProps {
    vulnerability: Vulnerability;
    onViewDetails: (vulnerability: Vulnerability) => void;
    onClick: () => void;
}

const VulnerabilityRow: React.FC<VulnerabilityRowProps> = ({ vulnerability, onViewDetails }) => {
    // Determine severity color
    const getSeverityColor = (severity: string): string => {
        switch (severity) {
            case 'Critical': return 'error';
            case 'High': return 'warning';
            case 'Medium': return 'info';
            case 'Low': return 'success';
            default: return 'default';
        }
    };

    // Format date
    const formatDate = (date: Date | string): string => {
        return date instanceof Date 
            ? date.toLocaleDateString()
            : new Date(date).toLocaleDateString();
    };

    // Get status color
    const getStatusColor = (status: string): string => {
        switch (status) {
            case 'Fixed': return 'success';
            case 'Not Fixed': return 'error';
            case 'In Progress': return 'warning';
            default: return 'default';
        }
    };

    return (
        <TableRow 
            hover 
            onClick={() => onViewDetails(vulnerability)}
            sx={{ 
                cursor: 'pointer',
                '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.04)' }
            }}
        >
            <TableCell>
                <Box display="flex" alignItems="center">
                    <SecurityIcon 
                        fontSize="small" 
                        color={getSeverityColor(vulnerability.severityLevel) as any} 
                        sx={{ mr: 1 }}
                    />
                    {vulnerability.name}
                </Box>
            </TableCell>
            <TableCell>{vulnerability.type}</TableCell>
            <TableCell sx={{ fontWeight: 'medium' }}>
                {vulnerability.cvssScore.toFixed(1)}
            </TableCell>
            <TableCell>
                <Chip 
                    label={vulnerability.severityLevel}
                    color={getSeverityColor(vulnerability.severityLevel) as any}
                    size="small"
                />
            </TableCell>
            <TableCell>
                {vulnerability.affectedAssets.length > 2 ? (
                    <Tooltip title={vulnerability.affectedAssets.join(', ')}>
                        <Box>
                            {vulnerability.affectedAssets.slice(0, 2).join(', ')} 
                            <Box component="span" sx={{ color: 'text.secondary' }}> 
                                +{vulnerability.affectedAssets.length - 2} more
                            </Box>
                        </Box>
                    </Tooltip>
                ) : (
                    vulnerability.affectedAssets.join(', ')
                )}
            </TableCell>
            <TableCell>
                {formatDate(vulnerability.discoveryDate)}
            </TableCell>
            <TableCell>
                <Chip 
                    label={vulnerability.status}
                    color={getStatusColor(vulnerability.status) as any}
                    size="small"
                />
            </TableCell>
            <TableCell align="right">
                <IconButton
                    size="small"
                    onClick={(e) => {
                        e.stopPropagation();
                        onViewDetails(vulnerability);
                    }}
                    aria-label="View details"
                    color="primary"
                >
                    <VisibilityIcon />
                </IconButton>
            </TableCell>
        </TableRow>
    );
};

export default VulnerabilityRow;