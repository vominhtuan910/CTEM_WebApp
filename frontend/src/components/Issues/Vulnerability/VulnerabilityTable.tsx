import { useState } from 'react';
import { 
  Table, TableBody, TableCell, TableContainer, 
  TableHead, TableRow, Paper, TextField, 
  MenuItem, Select, FormControl, InputLabel, 
  Button, InputAdornment, Box, Chip,
  Typography, Pagination, IconButton,
  Tooltip, Card, CardContent
} from '@mui/material';

import { DatePicker } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { Search, GetApp, Sort, FilterList, Refresh } from '@mui/icons-material';

import VulnerabilityRow from './VulnerabilityRow';
import VulnerabilityDetail from './VulnerabilityDetail';
import { Vulnerability } from '../../../types/vulnerability.types';
import useVulnerabilityData from '../../../hooks/useVulnerabilityData';
import ExportDialog from '../ExportDialog';

interface VulnerabilityTableProps {
  fetchFromApi?: boolean;
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ fetchFromApi = false }) => {
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [isDetailOpen, setIsDetailOpen] = useState(false);
  const [isExportOpen, setIsExportOpen] = useState(false);
  const [page, setPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [showFilters, setShowFilters] = useState(false);

  const {
    vulnerabilities,
    filteredVulnerabilities,
    isLoading,
    summary,
    searchTerm,
    setSearchTerm,
    severityFilter,
    setSeverityFilter,
    statusFilter,
    setStatusFilter,
    startDate,
    setStartDate,
    endDate,
    setEndDate,
    sortField,
    setSortField,
    sortDirection,
    setSortDirection,
    updateVulnerabilityStatus,
    resetFilters
  } = useVulnerabilityData({ fetchFromApi });

  const handleSort = (field: string) => {
    setSortDirection(sortField === field && sortDirection === 'desc' ? 'asc' : 'desc');
    setSortField(field);
  };

  const handleVulnerabilityClick = (vulnerability: Vulnerability) => {
    setSelectedVulnerability(vulnerability);
    setIsDetailOpen(true);
  };

  const handleCloseDetail = () => {
    setIsDetailOpen(false);
  };

  const handleStatusChange = (id: string, newStatus: string) => {
    updateVulnerabilityStatus(id, newStatus);
  };

  const handlePageChange = (_event: React.ChangeEvent<unknown>, value: number) => {
    setPage(value);
  };

  const toggleFilters = () => {
    setShowFilters(!showFilters);
  };

  const openExportDialog = () => {
    setIsExportOpen(true);
  };

  const closeExportDialog = () => {
    setIsExportOpen(false);
  };

  // Pagination
  const paginatedVulnerabilities = filteredVulnerabilities.slice(
    (page - 1) * rowsPerPage,
    page * rowsPerPage
  );

  const { 
    critical: criticalCount, 
    high: highCount, 
    medium: mediumCount, 
    low: lowCount,
    fixed: fixedCount,
    notFixed: notFixedCount,
    inProgress: inProgressCount,
    mostAffectedAsset
  } = summary;

  return (
    <div className="w-full">
      {/* Summary Cards */}
      <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr', lg: '1fr 1fr 1fr 1fr' }, gap: 3, mb: 4 }}>
        <Card>
          <CardContent>
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              Total Vulnerabilities
            </Typography>
            <Typography variant="h4">
              {vulnerabilities.length}
            </Typography>
            <Box display="flex" mt={2}>
              <Chip 
                label={`Critical: ${criticalCount}`} 
                color="error" 
                size="small" 
                sx={{ mr: 1 }} 
              />
              <Chip 
                label={`High: ${highCount}`} 
                color="warning" 
                size="small" 
              />
            </Box>
          </CardContent>
        </Card>
        <Card>
          <CardContent>
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              Status
            </Typography>
            <Box display="flex" justifyContent="space-between">
              <Box>
                <Typography variant="h4">
                  {fixedCount}
                </Typography>
                <Typography variant="body2" color="success.main">
                  Fixed
                </Typography>
              </Box>
              <Box>
                <Typography variant="h4" textAlign="right">
                  {notFixedCount}
                </Typography>
                <Typography variant="body2" color="error.main" textAlign="right">
                  Not Fixed
                </Typography>
              </Box>
            </Box>
            <Box mt={1}>
              <Typography variant="body2" color="text.secondary">
                {inProgressCount} in progress
              </Typography>
            </Box>
          </CardContent>
        </Card>
        <Card>
          <CardContent>
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              Medium & Low Severity
            </Typography>
            <Typography variant="h4">
              {mediumCount + lowCount}
            </Typography>
            <Box display="flex" mt={2}>
              <Chip 
                label={`Medium: ${mediumCount}`} 
                color="info" 
                size="small" 
                sx={{ mr: 1 }} 
              />
              <Chip 
                label={`Low: ${lowCount}`} 
                color="success" 
                size="small" 
              />
            </Box>
          </CardContent>
        </Card>
        <Card>
          <CardContent>
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              Most Affected Asset
            </Typography>
            <Typography variant="h5" noWrap>
              {mostAffectedAsset.name}
            </Typography>
            <Typography variant="body2" color="text.secondary" mt={2}>
              {mostAffectedAsset.count} vulnerabilities detected
            </Typography>
          </CardContent>
        </Card>
      </Box>

      {/* Filter and Search Controls */}
      <Paper sx={{ p: 2, mb: 3 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <TextField
            label="Search vulnerabilities"
            variant="outlined"
            size="small"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            sx={{ width: { xs: '100%', sm: '300px' } }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search />
                </InputAdornment>
              ),
            }}
          />
          
          <Box>
            <Button
              variant="outlined"
              startIcon={<FilterList />}
              onClick={toggleFilters}
              sx={{ mr: 1 }}
            >
              {showFilters ? 'Hide Filters' : 'Show Filters'}
            </Button>
            
            <Button
              variant="outlined"
              startIcon={<GetApp />}
              onClick={openExportDialog}
            >
              Export
            </Button>
          </Box>
        </Box>
        
        {showFilters && (
          <Box sx={{ mt: 2, p: 2, bgcolor: 'background.default', borderRadius: 1 }}>
            <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', md: '1fr 1fr 1fr 1fr' }, gap: 2 }}>
              <FormControl variant="outlined" size="small" fullWidth>
                <InputLabel>Severity</InputLabel>
                <Select
                  value={severityFilter}
                  onChange={(e) => setSeverityFilter(e.target.value)}
                  label="Severity"
                >
                  <MenuItem value="All">All</MenuItem>
                  <MenuItem value="Critical">Critical</MenuItem>
                  <MenuItem value="High">High</MenuItem>
                  <MenuItem value="Medium">Medium</MenuItem>
                  <MenuItem value="Low">Low</MenuItem>
                </Select>
              </FormControl>
              
              <FormControl variant="outlined" size="small" fullWidth>
                <InputLabel>Status</InputLabel>
                <Select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  label="Status"
                >
                  <MenuItem value="All">All</MenuItem>
                  <MenuItem value="Fixed">Fixed</MenuItem>
                  <MenuItem value="Not Fixed">Not Fixed</MenuItem>
                  <MenuItem value="In Progress">In Progress</MenuItem>
                </Select>
              </FormControl>
              
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Start Date"
                  value={startDate}
                  onChange={setStartDate}
                  slotProps={{ textField: { size: 'small', fullWidth: true } }}
                />
              </LocalizationProvider>
              
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="End Date"
                  value={endDate}
                  onChange={setEndDate}
                  slotProps={{ textField: { size: 'small', fullWidth: true } }}
                />
              </LocalizationProvider>
            </Box>
            
            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
              <Button
                variant="text"
                startIcon={<Refresh />}
                onClick={resetFilters}
              >
                Reset Filters
              </Button>
            </Box>
          </Box>
        )}
      </Paper>
      
      {/* Results Summary */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
        <Typography variant="subtitle1">
          Showing {paginatedVulnerabilities.length} of {filteredVulnerabilities.length} vulnerabilities
        </Typography>
      </Box>
      
      {/* Vulnerabilities Table */}
      <TableContainer component={Paper} sx={{ mb: 3 }}>
        <Table>
          <TableHead sx={{ bgcolor: 'background.default' }}>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Type</TableCell>
              <TableCell 
                onClick={() => handleSort('cvssScore')} 
                sx={{ cursor: 'pointer' }}
              >
                <Box display="flex" alignItems="center">
                  CVSS Score
                  <Sort 
                    fontSize="small"
                    sx={{ 
                      ml: 0.5,
                      color: sortField === 'cvssScore' ? 'primary.main' : 'text.disabled',
                      transform: sortField === 'cvssScore' && sortDirection === 'asc' ? 'rotate(180deg)' : 'none'
                    }} 
                  />
                </Box>
              </TableCell>
              <TableCell 
                onClick={() => handleSort('severityLevel')} 
                sx={{ cursor: 'pointer' }}
              >
                <Box display="flex" alignItems="center">
                  Severity
                  <Sort 
                    fontSize="small"
                    sx={{ 
                      ml: 0.5,
                      color: sortField === 'severityLevel' ? 'primary.main' : 'text.disabled',
                      transform: sortField === 'severityLevel' && sortDirection === 'asc' ? 'rotate(180deg)' : 'none'
                    }} 
                  />
                </Box>
              </TableCell>
              <TableCell>Affected Assets</TableCell>
              <TableCell 
                onClick={() => handleSort('discoveryDate')} 
                sx={{ cursor: 'pointer' }}
              >
                <Box display="flex" alignItems="center">
                  Discovery Date
                  <Sort 
                    fontSize="small"
                    sx={{ 
                      ml: 0.5,
                      color: sortField === 'discoveryDate' ? 'primary.main' : 'text.disabled',
                      transform: sortField === 'discoveryDate' && sortDirection === 'asc' ? 'rotate(180deg)' : 'none'
                    }} 
                  />
                </Box>
              </TableCell>
              <TableCell>Status</TableCell>
              <TableCell align="right">Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {isLoading ? (
              <TableRow>
                <TableCell colSpan={8} align="center" sx={{ py: 3 }}>
                  <Typography>Loading vulnerabilities...</Typography>
                </TableCell>
              </TableRow>
            ) : paginatedVulnerabilities.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} align="center" sx={{ py: 3 }}>
                  <Typography>No vulnerabilities found matching your filters</Typography>
                </TableCell>
              </TableRow>
            ) : (
              paginatedVulnerabilities.map((vulnerability) => (
                <VulnerabilityRow
                  key={vulnerability.id}
                  vulnerability={vulnerability}
                  onClick={() => handleVulnerabilityClick(vulnerability)}
                  onViewDetails={() => handleVulnerabilityClick(vulnerability)}
                />
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>
      
      {/* Pagination */}
      {filteredVulnerabilities.length > rowsPerPage && (
        <Box display="flex" justifyContent="center" my={3}>
          <Pagination
            count={Math.ceil(filteredVulnerabilities.length / rowsPerPage)}
            page={page}
            onChange={handlePageChange}
            color="primary"
          />
        </Box>
      )}
      
      {/* Vulnerability Detail Dialog */}
      {selectedVulnerability && (
        <VulnerabilityDetail
          vulnerability={selectedVulnerability}
          open={isDetailOpen}
          onClose={handleCloseDetail}
          onUpdateStatus={(status) => handleStatusChange(selectedVulnerability.id, status)}
        />
      )}

      {/* Export Dialog */}
      <ExportDialog
        open={isExportOpen}
        onClose={closeExportDialog}
        vulnerabilities={filteredVulnerabilities}
      />
    </div>
  );
};

export default VulnerabilityTable;