import { useState, useEffect } from 'react';
import { 
  Table, TableBody, TableCell, TableContainer, 
  TableHead, TableRow, Paper, TextField, 
  MenuItem, Select, FormControl, InputLabel, 
  Button, InputAdornment, Box
} from '@mui/material';

import { DatePicker } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { Search, GetApp, Sort } from '@mui/icons-material';
import { format } from 'date-fns';

import VulnerabilityRow from './VulnerabilityRow';
import VulnerabilityDetail from './VulnerabilityDetail';
import { Vulnerability } from './VulnInterface';

const VulnerabilityTable: React.FC = () => {
const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
const [filteredVulnerabilities, setFilteredVulnerabilities] = useState<Vulnerability[]>([]);
const [searchTerm, setSearchTerm] = useState('');
const [severityFilter, setSeverityFilter] = useState('All');
const [startDate, setStartDate] = useState<Date | null>(null);
const [endDate, setEndDate] = useState<Date | null>(null);
const [sortField, setSortField] = useState('severityLevel');
const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
const [isDetailOpen, setIsDetailOpen] = useState(false);

// Fetch vulnerabilities from API
useEffect(() => {
    // In a real app, you would fetch from an API
    // For demo, using mock data
    const mockVulnerabilities: Vulnerability[] = [
        {
            id: '1',
            name: 'CVE-2023-1234',
            type: 'SQL Injection',
            cvssScore: 9.8,
            severityLevel: 'Critical',
            affectedAssets: ['Database Server', 'Web Application'],
            discoveryDate: new Date('2023-06-15'),
            status: 'Not Fixed',
            description: 'SQL injection vulnerability in login form allows attackers to bypass authentication.',
            recommendations: 'Use prepared statements and input validation.',
            cveReferences: ['CVE-2023-1234', 'NIST-2023-1234'],
        },
        // Add more mock data as needed
    ];
    
    setVulnerabilities(mockVulnerabilities);
    setFilteredVulnerabilities(mockVulnerabilities);
}, []);

// Apply filters and sorting
useEffect(() => {
    let result = [...vulnerabilities];
    
    // Apply search filter
    if (searchTerm) {
        result = result.filter(vuln => 
            vuln.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
            vuln.affectedAssets.some(asset => asset.toLowerCase().includes(searchTerm.toLowerCase()))
        );
    }
    
    // Apply severity filter
    if (severityFilter !== 'All') {
        result = result.filter(vuln => vuln.severityLevel === severityFilter);
    }
    
    // Apply date range filter
    if (startDate) {
        result = result.filter(vuln => vuln.discoveryDate >= startDate);
    }
    
    if (endDate) {
        result = result.filter(vuln => vuln.discoveryDate <= endDate);
    }
    
    // Apply sorting
    result.sort((a, b) => {
        if (sortField === 'cvssScore') {
            return sortDirection === 'asc' ? a.cvssScore - b.cvssScore : b.cvssScore - a.cvssScore;
        } else if (sortField === 'discoveryDate') {
            return sortDirection === 'asc' 
                ? new Date(a.discoveryDate).getTime() - new Date(b.discoveryDate).getTime()
                : new Date(b.discoveryDate).getTime() - new Date(a.discoveryDate).getTime();
        } else if (sortField === 'severityLevel') {
            const severityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 };
            return sortDirection === 'asc' 
                ? severityOrder[a.severityLevel] - severityOrder[b.severityLevel]
                : severityOrder[b.severityLevel] - severityOrder[a.severityLevel];
        }
        return 0;
    });
    
    setFilteredVulnerabilities(result);
}, [vulnerabilities, searchTerm, severityFilter, startDate, endDate, sortField, sortDirection]);

const handleSort = (field: string) => {
    setSortDirection(sortField === field && sortDirection === 'desc' ? 'asc' : 'desc');
    setSortField(field);
};

const handleVulnerabilityClick = (vulnerability: Vulnerability) => {
    setSelectedVulnerability(vulnerability);
    setIsDetailOpen(true);
};

const handleCloseDetail = () => {
    setIsDetailOpen(false);
};

const handleStatusChange = (id: string, newStatus: string) => {
    const updatedVulnerabilities = vulnerabilities.map(vuln => 
        vuln.id === id ? { ...vuln, status: newStatus } : vuln
    );
    setVulnerabilities(updatedVulnerabilities);
};

const exportToCSV = () => {
    const headers = ['Name', 'Type', 'CVSS Score', 'Severity', 'Affected Assets', 'Discovery Date', 'Status'];
    const csvData = filteredVulnerabilities.map(vuln => [
        vuln.name,
        vuln.type,
        vuln.cvssScore.toString(),
        vuln.severityLevel,
        vuln.affectedAssets.join(', '),
        format(new Date(vuln.discoveryDate), 'yyyy-MM-dd'),
        vuln.status
    ]);
    
    const csvContent = [
        headers.join(','),
        ...csvData.map(row => row.join(','))
    ].join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', 'vulnerabilities.csv');
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
};

return (
    <div className="w-full">
        {/* Filter and Search Controls */}
        <div className="mb-6 flex flex-wrap items-center gap-4">
            <TextField
                label="Search"
                variant="outlined"
                size="small"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-64"
                slotProps={{
                    input: {
                        startAdornment: (
                            <InputAdornment position="start">
                                <Search />
                            </InputAdornment>
                        ),
                    }
                }}
            />
            
            <FormControl variant="outlined" size="small" className="w-40">
                <InputLabel>Severity</InputLabel>
                <Select
                    value={severityFilter}
                    onChange={(e) => setSeverityFilter(e.target.value)}
                    label="Severity"
                >
                    <MenuItem value="All">All</MenuItem>
                    <MenuItem value="Critical">Critical</MenuItem>
                    <MenuItem value="High">High</MenuItem>
                    <MenuItem value="Medium">Medium</MenuItem>
                    <MenuItem value="Low">Low</MenuItem>
                </Select>
            </FormControl>
            
            <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                    label="Start Date"
                    value={startDate}
                    onChange={setStartDate}
                    className="w-40"
                />
                <DatePicker
                    label="End Date"
                    value={endDate}
                    onChange={setEndDate}
                    className="w-40"
                />
            </LocalizationProvider>
            
            <Button
                variant="outlined"
                startIcon={<GetApp />}
                onClick={exportToCSV}
                className="ml-auto"
            >
                Export
            </Button>
        </div>
        
        {/* Vulnerabilities Table */}
        <TableContainer component={Paper} className="shadow-md">
            <Table>
                <TableHead className="bg-gray-100">
                    <TableRow>
                        <TableCell>Name</TableCell>
                        <TableCell>Type</TableCell>
                        <TableCell onClick={() => handleSort('cvssScore')} className="cursor-pointer">
                            <Box display="flex" alignItems="center">
                                CVSS Score
                                <Sort className={sortField === 'cvssScore' ? 'text-primary-600' : 'text-gray-400'} />
                            </Box>
                        </TableCell>
                        <TableCell onClick={() => handleSort('severityLevel')} className="cursor-pointer">
                            <Box display="flex" alignItems="center">
                                Severity
                                <Sort className={sortField === 'severityLevel' ? 'text-primary-600' : 'text-gray-400'} />
                            </Box>
                        </TableCell>
                        <TableCell>Affected Assets</TableCell>
                        <TableCell onClick={() => handleSort('discoveryDate')} className="cursor-pointer">
                            <Box display="flex" alignItems="center">
                                Discovery Date
                                <Sort className={sortField === 'discoveryDate' ? 'text-primary-600' : 'text-gray-400'} />
                            </Box>
                        </TableCell>
                        <TableCell>Status</TableCell>
                        <TableCell>Actions</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {filteredVulnerabilities.map((vulnerability) => (
                        <VulnerabilityRow
                            key={vulnerability.id}
                            vulnerability={vulnerability}
                            onClick={() => handleVulnerabilityClick(vulnerability)} onViewDetails={function (_vulnerability: Vulnerability): void {
                                throw new Error('Function not implemented.');
                            } }                        />
                    ))}
                    {filteredVulnerabilities.length === 0 && (
                        <TableRow>
                            <TableCell colSpan={8} className="text-center py-6">
                                No vulnerabilities found matching your criteria
                            </TableCell>
                        </TableRow>
                    )}
                </TableBody>
            </Table>
        </TableContainer>
        
        {/* Vulnerability Detail Modal */}
        {selectedVulnerability && (
            <VulnerabilityDetail
                vulnerability={selectedVulnerability}
                open={isDetailOpen}
                onClose={handleCloseDetail}
                onUpdateStatus={(newStatus) => handleStatusChange(selectedVulnerability.id, newStatus)}
            />
        )}
    </div>
);
};

export default VulnerabilityTable;